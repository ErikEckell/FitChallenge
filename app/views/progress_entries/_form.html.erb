<%= form_with(model: @progress_entry, local: true) do |form| %>
  <% if @progress_entry.errors.any? %>
    <div class="alert alert-danger">
      <h4><%= pluralize(@progress_entry.errors.count, "error") %> prevented saving:</h4>
      <ul>
        <% @progress_entry.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-3">
    <%= form.label :participation_id, "Participation" %>
    <%= form.collection_select :participation_id, current_user.participations.includes(:challenge),
        :id, ->(p) { p.challenge.title }, { prompt: "Select challenge" }, class: "form-select", id: "participation-select" %>
  </div>

  <div class="mb-3">
    <%= form.label :exercise_id, "Exercise" %>
    <%= form.collection_select :exercise_id, Exercise.all, :id, :name, { prompt: "Select exercise" }, class: "form-select", id: "exercise-select" %>
  </div>

  <div class="mb-3">
    <%= form.label :entry_date, "Entry Date" %>
    <%= form.date_field :entry_date, class: "form-control", required: true, id: "entry-date" %>
  </div>

  <div class="mb-3">
    <%= form.label :metric_value, "Metric Value (<span id='unit-label'>–</span>)".html_safe %>
    <%= form.number_field :metric_value, class: "form-control", step: 0.1, required: true %>
  </div>

  <%= form.submit class: "btn btn-primary" %>
<% end %>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const participationSelect = document.getElementById("participation-select");
    const entryDate = document.getElementById("entry-date");
    const exerciseSelect = document.getElementById("exercise-select");
    const unitLabel = document.getElementById("unit-label");

    // Mapeo de exercise_id -> unidad
    const exerciseUnits = {};
    <% Exercise.all.each do |ex| %>
      exerciseUnits["<%= ex.id %>"] = "<%= ex.unit %>";
    <% end %>

    // Actualizar unidad al cambiar ejercicio
    exerciseSelect.addEventListener("change", () => {
      unitLabel.textContent = exerciseUnits[exerciseSelect.value] || "–";
    });

    // Actualizar rango de fechas al cambiar participación
    participationSelect.addEventListener("change", () => {
      const participationId = participationSelect.value;

      if (!participationId) {
        entryDate.removeAttribute("min");
        entryDate.removeAttribute("max");
        return;
      }

      fetch(`/participations/${participationId}.json`)
        .then(response => response.json())
        .then(data => {
          entryDate.min = data.challenge_start;
          entryDate.max = data.challenge_end;
        });
    });
  });
</script>
